package HarGenerator.PerformanceFrameWork;

import java.io.File;

import HarGenerator.PerformanceFrameWork.GenerateHar.HarGeneration;
import HarGenerator.PerformanceFrameWork.Resources.GetUserValues;
import HarGenerator.PerformanceFrameWork.Resources.ResourcePaths;

public class App 
{
    public static void main( String[] args )
    {
    	File resultFolder = new File(ResourcePaths.resultHolder);
    	if (!resultFolder.exists()) {
			resultFolder.mkdir();
		}
    	
    	try {
			String urls = GetUserValues.properties("urlTobeRedirected");
			String uniqueKeys = GetUserValues.properties("provideUniqueKey");
			String iterators = GetUserValues.properties("iterationNumber");
			String[] TempURLS = urls.split(",");
			String[] TempKeys = uniqueKeys.split(",");
			String[] TempIterators = iterators.split(",");
			
			if (TempKeys.length==TempURLS.length && TempKeys.length == TempIterators.length) {
				for (int i = 0; i < TempKeys.length; i++) {
					String url = TempURLS[i]/*.replace(TempURLS[i].length(), newChar)*/;
					String keys = TempKeys[i];
					int itrs = Integer.parseInt(TempIterators[i]);
//					System.out.println(url + " " + keys.trim() + " " + itrs);
//					System.out.println("-------------"); 
					// Iteration Number Counter
//					int getIterationNumber = Integer.parseInt(GetUserValues.properties("iterationNumber"));
					for (int j = 0; j < itrs; j++) {
						HarGeneration.GenerateHar(url, keys.trim());
						System.out.println("Round : " + (j+1));
					}
					System.out.println("Cycle : " + (i+1));
				}
			}
			
			
		} catch (Exception e) {

		}
    	
    	/*try {
			int getIterationNumber = Integer.parseInt(GetUserValues.properties("iterationNumber"));
			for (int i = 0; i < getIterationNumber; i++) {
				HarGeneration.GenerateHar();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}*/
    }
}
